{"version":3,"sources":["index.js"],"names":["Random","seed","res","len","length","i","charCodeAt","isNaN","Math","floor","random","_current","n_seed","raw","Object","assign","int","min","max","undefined","getNextSeed","choice","array","reset","setSeed","number","_getCurrent","shuffle","temp","i_rand","Mixin","superclass","opts","_prng","_SEED","setPRNG","fp","obj","_PRNG"],"mappings":"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","file":"index.map","sourceRoot":"..","sourcesContent":["/* Usage:\n   random = Random(SEED) // seed is an integer or string\n   random() // float 0-1\n   random.int(N) // int [0,N-1]\n   random.int() // int [0,2147483646]\n   random.choice(array) // random element from array\n   random.shuffle(array) // Returns shuffled array (mutates array)\n   random.reset() // returns PRNG to begining\n*/\n\n// PRNG algorithm borrowed from https://gist.github.com/blixt/f17b47c62508be59987b\n\nconst Random = seed => {\n  // https://stackoverflow.com/a/7616484\n  if (typeof seed === 'string') {\n    // convert string to integer\n    let res = 0\n    const len = seed.length\n    for (let i = 0; i < len; i++) {\n      res = res * 31 + seed.charCodeAt(i)\n      res = res & res\n    }\n    seed = res\n  } else if (isNaN(seed)) {\n    // seed was neither string or number... pick a truely random seed\n    seed = Math.floor(Math.random() * 2147483647)\n  }\n\n  let _current\n  let n_seed\n  const random = () => (random.raw() - 1) / 2147483646 // 0-1\n\n  Object.assign(random, {\n    seed: seed,\n    int: (min = 2147483647, max) => {\n      // min-max or 0-min if no max\n      if (max === undefined) {\n        max = min\n        min = 0\n      }\n      return Math.floor(random() * (max - min) + min)\n    },\n    raw: () => (_current = (_current * 16807) % 2147483647), // 0-2147483646\n    getNextSeed: () => (n_seed = (n_seed * 16807) % 2147483647), // 0-2147483646\n    choice: array => array[random.int(array.length)],\n    reset: () => {\n      _current = seed % 2147483647\n      if (_current <= 0) _current += 2147483646\n      // for SEED < 10,000 the first number is always ~ 0.01, so let's burn that one\n      // might as well use it to randomize where child seeds come from\n      n_seed = Math.floor(1e6/random())\n    },\n    setSeed: number => {\n      seed = number\n      random.reset()\n    },\n    _getCurrent: () => _current,\n    shuffle: array => {\n      let i = array.length,\n        temp,\n        i_rand\n      // While there remain elements to shuffle...\n      while (0 !== i) {\n        // Pick a remaining element...\n        i_rand = Math.floor(random() * i)\n        i -= 1\n        // And swap it with the current element.\n        temp = array[i]\n        array[i] = array[i_rand]\n        array[i_rand] = temp\n      }\n      return array\n    },\n  })\n  random.reset()\n\n  return random\n}\n\nRandom.Mixin = (superclass=Object) =>\n  class extends superclass {\n    // creates a method this.random which is a PRNG based on opts._SEED or opts.parent.random\n    constructor(opts = {}) {\n      super(opts)\n      if (opts._prng) {\n        // derive seed from a parent PRNG\n        this._SEED = opts._prng.random.getNextSeed()\n      } else if (opts._SEED) {\n        this._SEED = opts._SEED\n      }\n\n      this.setPRNG(this._SEED)\n    }\n    setPRNG(_SEED) {\n      this.random = Random(_SEED)\n      this._SEED = this.random.seed // in event there was no seed\n    }\n  }\n\n\n// This takes a different approach, where the seed is stored on an obj\nconst fp = Random.fp = {\n  raw: obj => (obj._PRNG = (obj._PRNG * 16807) % 2147483647), // 0-2147483646\n\n  random: obj => (fp.raw(obj) - 1) / 2147483646, // 0-1\n  int: (obj, min = 2147483647, max) => {\n    // min-max or 0-min if no max\n    if (max === undefined) {\n      max = min\n      min = 0\n    }\n    return Math.floor(fp.random(obj) * (max - min) + min)\n  },\n\n  choice: (obj, array) => array[fp.int(obj,array.length)],\n\n  shuffle: (obj, array) => {\n    let i = array.length,\n        temp,\n        i_rand\n    // While there remain elements to shuffle...\n    while (0 !== i) {\n      // Pick a remaining element...\n      i_rand = Math.floor(fp.random(obj) * i)\n      i -= 1\n      // And swap it with the current element.\n      temp = array[i]\n      array[i] = array[i_rand]\n      array[i_rand] = temp\n    }\n    return array\n  },\n}\n\nexport default Random\n"]}